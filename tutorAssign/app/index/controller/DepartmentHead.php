<?php
namespace app\index\controller;

use think\Controller;
use think\Db;
use think\Request;
use think\response\Redirect;

class DepartmentHead extends BaseController {

    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $user = $this->auto_login();
        $_temp = array(
            array("view_baoke", "查看报课", "align-justify", ["show_table", "edit_baoke"]),
            array("teacher_manager", "教师管理", "pencil", [""]),
            array("information", "个人信息", "user", [""]),
        );
        $menu = $this->make_menu($_temp);
        $this->assign('menus', $menu);
        $this->assign('user', $user);

    }

    public function index_1() {
        $this->redirect('view_baoke');
    }

    public function index() {
        return $this->fetch('index');
    }

    public function view_baoke() {
        $user = $this->auto_login();
        $request = Request::instance();
        if($request->isAjax()) {
            $off_set = $request->get('offset');
            $page_size = $request->get('limit');
            $search = $request->get('search', '');
            //$task_info = Db::table('task_info')->where("taskState != '0'")->select();
            $result = [];
            $condition = [
                "t.taskState"   =>['<>', 0],
                "d.workNumber"  =>$user["workNumber"],
                "locate(d.major,t.relativeTable)" =>['>',0]
            ];
            $list = Db::table('task_info t, department_head_majors d')->field('t.*')->where($condition)->paginate($page_size, false, ['page'=>$off_set/$page_size + 1]);
            foreach ($list->all() as $item) {
                $first              = Db::table($item['relativeTable'])->where(['insertTime'=>1])->find();

                $item["courseName"] = $first["grade"];
                $item["major"]      = $this->translate($item["relativeTable"]);
                $result[] = $item;
            }
            $data = [
                "total"=>$list->total(),
                "rows"=>$result,
            ];
            return json($data);

        }


        return $this->fetch();
    }

    public function  manage_teacher() {

    }


    public function save_table() {
        $user = $this->auto_login();
        $request = Request::instance();
        $table_name = $request->get('table_name');

        if ($request->isAjax()) {
            $data = $request->post('strJson');
            $data = json_decode($data, true);
            $table = Db::table($table_name);
            $table->where(["insertTime"=>$data["insertTime"]])->update($data);
            return $this->successJson('');
        }

        return '';

    }
    public function edit_baoke() {
        $request = Request::instance();
        $table_name = $request->get('table_name');
        if ($request->isAjax()) {
            $off_set = $request->get('offset');
            $page_size = $request->get('limit', 'all');
            $search = $request->get('search', '');

            $table = Db::table($table_name);
            $condition = 'major != "" AND major != "专业"';
            $search_condition = [];
            if ($search) {
                $filed_arr = Db::getTableInfo($table_name, 'fields');;
                $search_condition[implode('|',$filed_arr)] = ['like', '%'.$search.'%'];
            }
            if ($page_size === 'all') {
                $list = $table->where($condition)->where($search_condition)->select();
                $data = [
                    "total"=>count($list),
                    "rows"=>$list,
                ];
            }else {
                $list = $table->where($condition)->where($search_condition)->paginate($page_size, false, ['page' => $off_set / $page_size + 1]);
                $data = [
                    "total"=>$list->total(),
                    "rows"=>$list->all(),
                ];
            }
            return json($data);
        }
        $this->assign('table_name', $table_name);
        return $this->fetch();
    }

    public function show_table() {
        $request = Request::instance();
        $table_name = $request->get('table_name');
        if ($request->isAjax()) {
            $off_set = $request->get('offset');
            $page_size = $request->get('limit', 'all');
            $search = $request->get('search', '');

            $table = Db::table($table_name);
            $condition = 'major != "" AND major != "专业"';
            $search_condition = [];
            if ($search) {
                $filed_arr = Db::getTableInfo($table_name, 'fields');;
                $search_condition[implode('|',$filed_arr)] = ['like', '%'.$search.'%'];
            }
            if ($page_size === 'all') {
                $list = $table->where($condition)->where($search_condition)->select();
                $data = [
                    "total"=>count($list),
                    "rows"=>$list,
                ];
            }else {
                $list = $table->where($condition)->where($search_condition)->paginate($page_size, false, ['page' => $off_set / $page_size + 1]);
                $data = [
                    "total"=>$list->total(),
                    "rows"=>$list->all(),
                ];
            }
            return json($data);

        }
        $this->assign('table_name', $table_name);
        return $this->fetch();
    }

    public function information_json() {
        $user = $this->auto_login();
        $majors = Db::table('department_head_majors')->where('workNumber', $user['workNumber'])->select();
        foreach ($majors as &$item) {
            $user['major[]'][] = ($item['major']);
        }
        return json($user);
    }


    public function information() {
        $user = $this->auto_login();

        if($this->request->isPost()) {
            $majors = isset($_POST['major'])?$_POST['major']:[];
            if (!empty($majors) && is_array($majors)) {
                db('department_head_majors')->where('workNumber',$user['workNumber'])->delete();
                foreach ($majors as $item) {
                    $insert_data = [
                        "workNumber"=>$user["workNumber"],
                        "major"=>$item,
                        "privilege"=>0
                    ];
                    db('department_head_majors')->insert($insert_data);
                }
            }
            $save = $this->request->post();
            unset($save['major']);
            if (empty($save["password"])) {
                unset($save["password"]);
                unset($save["re_password"]);
            } else {
                if($save["password"] != $save["re_password"]) {
                    $this->error("两次密码不一致");
                }
                unset($save["re_password"]);
            }
            Db::table('user_department_head')->where('workNumber', $user['workNumber'])->update($save);


        }
        $majors = Db::table('department_head_majors')->where('workNumber', $user['workNumber'])->select();
        foreach ($majors as &$item) {
            $item['major_name'] = $this->translate($item['major']);
        }
        $this->refresh_user();
        $this->assign('majors', $majors);
        return $this->fetch();
    }


    public function teacher_manager() {
        $user = $this->auto_login();
        $request = $this->request;
        if ($request->isAjax()) {
            $action = $request->get('action');
            $off_set = $request->get('offset');
            $page_size = $request->get('limit', 10);
            $search = $request->get('search', '');
            $table = Db::table('user_teacher');
            $search_condition = [];
            if ($search) {
                $filed_arr = Db::getTableInfo('user_teacher', 'fields');;
                $search_condition[implode('|',$filed_arr)] = ['like', '%'.$search.'%'];
            }
            if ($action === 'teacher_info') {
                $list = $table->where($search_condition)->paginate($page_size, false, ['page' => $off_set / $page_size + 1]);
                $data = [
                    "total"=>$list->total(),
                    "rows"=>$list->all(),
                ];
                return json($data);
            }else if ($action === 'add') {
                $data = $request->post('data');
                $data = json_decode($data, true);
                $data['sex'] = '男';
                $data['birthday'] = '';
                $data['department'] = '';
                $data['telephone'] = '';
                $data['email'] = '';
                $table->insert($data);
            }else if ($action === 'del') {
                $data = $request->post('data');
                $data = json_decode($data, true);
                foreach ($data as $item) {
                    db('user_teacher')->where('workNumber',$item['workNumber'])->delete();
                }
            }
            return $this->successJson();
        }


        return $this->fetch();
    }







}