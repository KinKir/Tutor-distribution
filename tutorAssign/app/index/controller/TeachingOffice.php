<?php
namespace app\index\controller;

use think\Controller;
use think\Db;
use think\Request;
use think\response\Redirect;

class TeachingOffice extends BaseController {

    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $user = $this->auto_login();
        $_temp = array(
            array("add_baoke", "新建报课", "plus", []),
            array("table_overview", "报课管理", "align-justify", ["table_fill"]),
            array("teacher_manager", "教师管理", "list", ["information_change"]),
            array("information", "个人信息", "user", ["information_change"]),
        );
        $this->menu = $this->make_menu($_temp);
        $this->assign('user', $user);
        $this->assign('menus', $this->menu);


    }

    public function index_1() {
        $this->redirect(url('add_baoke'));
    }

    public function index() {
        return $this->fetch('indexHome');
    }

    //ajax 联动
    public function select() {
        $request = Request::instance();
        $table = Db::table('task_info');
        $level = $request->post("select_level");
        $result = [];
        if ($level == 'first') {
            //第一联动
            $years = $table->distinct(true)->field('year')->select();
            $result[] = ["name"=>"请选择学年","value"=>""];
            foreach($years as $row) {
                $result[] = ["name"=>$row['year'],"value"=>$row['year']];
            }
            return $this->successJson($result);
        }else if ($level == 'second') {
            //第一联动
            $first_key = $request->post('first_key');
            $semesters = $table->distinct(true)->field('semester')->where('year', $first_key)->select();
            $result[] = ["name"=>"请选择学期","value"=>""];
            foreach($semesters as $row) {
                $result[] = array("name"=>$row['semester'],"value"=>$row['semester']);
            }
            return $this->successJson($result);
        }else if ($level == 'third') {
            $first_key = $request->post('first_key');
            $second_key = $request->post('second_key');
            $tbs = $table->distinct(true)->field('relativeTable')->where(["year"=>$first_key,"semester"=>$second_key,"taskState"=>'2'])->select();
            $result[] = ["name"=>"请选择学期","value"=>""];
            foreach($tbs as $row) {
                $result[] = array("name"=>$this->translate($row['relativeTable']),"value"=>$row['relativeTable']);
            }
            return $this->successJson($result);
        }
        return $this->errorJson("类型错误");
    }
    public function table_overview() {
        $request = Request::instance();
        $year = $request->get("year");
        $table = Db::table('task_info');
        $task = $table->distinct(true)->field('year')->select();
        $this->assign('task', $task);
        return $this->fetch('index');
    }
    public function table_page($table_name = '') {
        $request = Request::instance();
        $user = $this->auto_login();
        if ($request->isAjax()) {
            $table_name = $table_name == '' ? $request->get('major'): $table_name;
            $off_set = $request->get('offset');
            $page_size = $request->get('limit', 'all');
            $search = $request->get('search', '');
            $task_info = Db::table('task_info')->where(["relativeTable"=> $table_name])->find();
            $table_name = $task_info["taskState"] == '2' ?  'cb_'.$table_name: $table_name;
            $table = Db::table($table_name);
            $condition = 'major != "" AND major != "专业"';
            if ($task_info["taskState"] != '2') {
                $condition .= " AND workNumber = '{$user['workNumber']}'";
            }
            $search_condition = [];
            if ($search) {
                $filed_arr = Db::getTableInfo($table_name, 'fields');;
                $search_condition[implode('|',$filed_arr)] = ['like', '%'.$search.'%'];
            }
            //$condition = ['*'=>['like'=>'15']];
            if ($page_size === 'all') {
                $list = $table->where($condition)->where($search_condition)->select();
                $data = [
                    "total"=>count($list),
                    "rows"=>$list,
                ];
            }else {
                $list = $table->where($condition)->where($search_condition)->paginate($page_size, false, ['page' => $off_set / $page_size + 1]);
                $data = [
                    "total"=>$list->total(),
                    "rows"=>$list->all(),
                ];
            }

            return json($data);
        }
        return '';
    }

    public function table_list() {
        $user = $this->auto_login();
        $table = Db::table('task_info');
        $page_size = 3;
        $list = $table->where(['taskState'=>0])->paginate($page_size);
        $data = [];
        foreach ($list->all() as $item) {
            //过滤未填的表格
            if(Db::table($item['relativeTable'])->where(["workNumber"=>$user["workNumber"]])->find()) {
                continue;
            }
            $first = Db::table($item['relativeTable'])->where(['insertTime'=>1])->find();
            $data[] = [
                "courseName"=> $first["grade"],
                "major"=>$this->translate($item['relativeTable']),
                "deadline"=>$item['teacherDeadline'],
                "relativeTable"=>$item['relativeTable']
            ];
        }
        $this->assign('page', $list->render());
        $this->assign('data', $data);
        $this->assign("list", $list);
        return $this->fetch('table_list');
    }



    public function teacher_manager() {
        $user = $this->auto_login();
        $request = $this->request;
        if ($request->isAjax()) {
            $action = $request->get('action');
            $off_set = $request->get('offset');
            $page_size = $request->get('limit', 10);
            $search = $request->get('search', '');
            $table = Db::table('user_teacher');
            $search_condition = [];
            if ($search) {
                $filed_arr = Db::getTableInfo('user_teacher', 'fields');;
                $search_condition[implode('|',$filed_arr)] = ['like', '%'.$search.'%'];
            }
            if ($action === 'teacher_info') {
                $list = $table->where($search_condition)->paginate($page_size, false, ['page' => $off_set / $page_size + 1]);
                $data = [
                    "total"=>$list->total(),
                    "rows"=>$list->all(),
                ];
                return json($data);
            }else if ($action === 'add') {
                $data = $request->post('data');
                $data = json_decode($data, true);
                $data['sex'] = '男';
                $data['birthday'] = '';
                $data['department'] = '';
                $data['telephone'] = '';
                $data['email'] = '';
                $table->insert($data);
            }else if ($action === 'del') {
                $data = $request->post('data');
                $data = json_decode($data, true);
                foreach ($data as $item) {
                    db('user_teacher')->where('workNumber',$item['workNumber'])->delete();
                }
            }
            return $this->successJson();
        }


        return $this->fetch();
    }

    public function information() {
        $user = $this->auto_login();
        if($this->request->isPost()) {
            $save = $this->request->post();
            if (empty($save["password"])) {
                unset($save["password"]);
                unset($save["re_password"]);
            } else {
                if($save["password"] != $save["re_password"]) {
                    $this->error("两次密码不一致");
                }
                unset($save["re_password"]);
            }
            Db::table('user_teaching_office')->where('workNumber', $user['workNumber'])->update($save);
            $this->refresh_user();
            return $this->success("修改成功");
        }
        return $this->fetch();
    }
    public function import_excel() {
        $user = $this->auto_login();
        $request = Request::instance();
        if($this->request->isPost()) {
            $file = $request->file('file_teacher_list');
            $info = $file->move(ROOT_PATH . 'uploads');
            require_once 'extend/reader.php';
            $data = new \Spreadsheet_Excel_Reader();
            $data->setOutputEncoding('utf-8');//设置在页面中输出的编码方式
            $data->read($info->getRealPath());  //读取上传到当前目录下名叫$filename的文件

            error_reporting(E_ALL ^ E_NOTICE);
            //如果excel表带标题，则从$i=2开始，去掉excel表中的标题部分(要将$i<=改为$i<否则会插入一条多余的空数据)
            for ($i = 3; $i <=$data->sheets[0]['numRows']; $i++)
            {
                $insert = [];
                $insert['workNumber'] = $data->sheets[0]['cells'][$i][1];//职工号
                $insert['password']   = $data->sheets[0]['cells'][$i][2];//密码
                $insert['name']       = $data->sheets[0]['cells'][$i][3];//姓名
                $insert['sex']        = '男';
                $insert['birthday']   = '';
                $insert['department'] = '';
                $insert['telephone']  = '';
                $insert['email']      = '';
                Db::table('user_teacher')->insert($insert);
                //$insert_info.= " $sql</br>\n";          //可以用来显示数据插入的信息
                $totalNums=$data->sheets[0]['numRows']-2;//求出导入的总数据条数(这里是减去2，才会得到去除标题后的总数据)
                //echo "导入成功！";
                //echo($totalNums);
            }
            //unlink($info->getRealPath());
            $this->success("上传成功，共添加".$totalNums."名教师");
        }
    }

    public function add_baoke() {
        $user = $this->auto_login();
        $request = $this->request;

        if ($request->isPost()) {
            $post = $request->post();
            $file = $request->file('tableFile');
            $info = $file->move(ROOT_PATH . 'uploads');
            $table_name = $request->post('major');

            //如果上传文件成功，就执行导入excel操作
            require_once 'extend/reader.php';
            $data = new \Spreadsheet_Excel_Reader();
            $data->setOutputEncoding('utf-8');//设置在页面中输出的编码方式
            $data->read($info->getRealPath());  //读取上传到当前目录下名叫$filename的文件

            error_reporting(E_ALL ^ E_NOTICE);
            $teacherDeadline =$_POST["teacherDeadline"];
            $departmentDeadline=$_POST["departmentDeadline"];
            //动态建表的后缀获取
            $year = $_POST['year'];
            $semester = $_POST['semester'];
            $tableName1 =   $table_name.$year.$semester; //动态建表的表名
            $tableName2 = "cb_".$table_name.$year.$semester; //动态cb建表的表名

            //时间判断
            if($year < date('Y',time())){
               $this->error('所选年份要不小于当前年份！');
            }else if( $teacherDeadline <= date('Ymd',time()) ) {
                $this->error('报课截止日期要大于当前日期！');
            }else if($teacherDeadline >= $departmentDeadline )  {
                $this->error('报课截止时间应小于审核截止时间！');
            }

            $table = Db::table('task_info');
            $judge_cover = 0;
            if($table->where('relativeTable',$tableName1)->find()) {
                //查询表中有多少行  对于存在的课表进行覆盖处理
                db('task_info')->where('relativeTable',$tableName1)->delete();
                Db::execute("drop table {$tableName1}");
                Db::execute("drop table {$tableName2}");
                $judge_cover = 1;
            }

            //创建非cb表
            $sql = $this->create_table_template($tableName1,'tc');
            Db::execute($sql);
            $sql = "ALTER TABLE {$tableName1} ADD INDEX ( `insertTime` ) ";//设置索引
            Db::execute($sql);
            $state = '0';
            $sql = "INSERT INTO task_info(relativeTable,year,semester,departmentDeadline,teacherDeadline,taskState) VALUES('".$tableName1."','".$year."','".$semester."','".$departmentDeadline."','".$teacherDeadline."','".$state."')";
            Db::execute($sql);//将新建表格信息记录到task_info表

            //创建cb表
            $sql = $this->create_table_template($tableName2, 'cb');
            Db::execute($sql);
            $sql = "ALTER TABLE {$tableName2} ADD INDEX ( `insertTime` ) ";//设置索引
            Db::execute($sql);
            //如果excel表带标题，则从$i=2开始，去掉excel表中的标题部分(要将$i<=改为$i<否则会插入一条多余的空数据)
            for ($i = 1; $i <$data->sheets[0]['numRows']; $i++) {
                $sql = "INSERT INTO {$tableName1} (insertTime,grade,major,people,courseName,courseType,courseCredit,courseHour,practiceHour,onMachineHour,
        timePeriod,teacherName,remark) VALUES('".
                    $i."','".                                //用于排序
                    $data->sheets[0]['cells'][$i][1]."','".    //年级
                    $data->sheets[0]['cells'][$i][2]."','".    //专业
                    $data->sheets[0]['cells'][$i][3]."','".    //人数
                    $data->sheets[0]['cells'][$i][4]."','".    //课程名
                    $data->sheets[0]['cells'][$i][5]."','".    //课程类型
                    $data->sheets[0]['cells'][$i][6]."','".    //学分
                    $data->sheets[0]['cells'][$i][7]."','".    //学时
                    $data->sheets[0]['cells'][$i][8]."','".     //实验学时
                    $data->sheets[0]['cells'][$i][9]."','".    //上机学时
                    $data->sheets[0]['cells'][$i][10]."','".   //起止时间
                    $data->sheets[0]['cells'][$i][11]."','".   //教师名
                    $data->sheets[0]['cells'][$i][12]."')";    //备注
                Db::execute($sql);
                $sql = "INSERT INTO $tableName2(insertTime,grade,major,people,courseName,courseType,courseCredit,courseHour,practiceHour,onMachineHour,
        timePeriod,teacherName,remark) VALUES('".
                    $i."','".                                //用于排序
                    $data->sheets[0]['cells'][$i][1]."','".    //年级
                    $data->sheets[0]['cells'][$i][2]."','".    //专业
                    $data->sheets[0]['cells'][$i][3]."','".    //人数
                    $data->sheets[0]['cells'][$i][4]."','".    //课程名
                    $data->sheets[0]['cells'][$i][5]."','".    //课程类型
                    $data->sheets[0]['cells'][$i][6]."','".    //学分
                    $data->sheets[0]['cells'][$i][7]."','".    //学时
                    $data->sheets[0]['cells'][$i][8]."','".     //实验学时
                    $data->sheets[0]['cells'][$i][9]."','".    //上机学时
                    $data->sheets[0]['cells'][$i][10]."','".   //起止时间
                    $data->sheets[0]['cells'][$i][11]."','".   //教师名
                    $data->sheets[0]['cells'][$i][12]."')";    //备注
                Db::execute($sql);
                //$insert_info.= " $sql</br>\n";          //可以用来显示数据插入的信息
            }
            //unlink($info->getRealPath());
            if($judge_cover==0) {
                $this->success('上传成功');
            }else if ($judge_cover == 1) {
                $this->success('该课表已存在，覆盖成功！');
            }

        }
        return $this->fetch();
    }


    private function create_table_template($table_name, $index = 'tc') {
        $sql['tc'] = "CREATE TABLE IF NOT EXISTS {$table_name} (
          `insertTime` int(10) NOT NULL,
          `workNumber` varchar(40)  COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `grade` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `major` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `people` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseName` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseType` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseCredit` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `practiceHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `onMachineHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `timePeriod` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `teacherName` varchar(200) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `remark` varchar(200) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          PRIMARY KEY (`workNumber`,`grade`,`major`,`people`,`courseName`,
            `courseType`,`courseCredit`,`courseHour`,`practiceHour`,
            `onMachineHour`))";

        $sql['cb'] = "CREATE TABLE IF NOT EXISTS {$table_name} (
          `insertTime` int(10) NOT NULL,
          `grade` varchar(40) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `major` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `people` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseName` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseType` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseCredit` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `courseHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `practiceHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `onMachineHour` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `timePeriod` varchar(30) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `teacherName` varchar(200) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          `remark` varchar(200) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
          PRIMARY KEY (`grade`,`major`,`people`,`courseName`,
            `courseType`,`courseCredit`,`courseHour`,`practiceHour`,
            `onMachineHour`))";
        return $sql[$index];
    }


}